import asyncio
import os
import re
import time
import json
from datetime import datetime
from telethon import TelegramClient, events, Button
from dotenv import load_dotenv

# .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ рж▓рзЛржб ржХрж░рж╛
load_dotenv('config.env')

# ==== ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи рж▓рзЛржб ржХрж░рж╛ ====
# ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рждрзЗ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржерзЗржХрзЗ рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
API_ID = int(os.getenv('API_ID', 0))
API_HASH = os.getenv('API_HASH', '')

OTP_SOURCE_CHAT = int(os.getenv('OTP_SOURCE_CHAT', 0))
OTP_TARGET_CHAT = int(os.getenv('OTP_TARGET_CHAT', 0))

FILE_SOURCE_CHAT = int(os.getenv('FILE_SOURCE_CHAT', 0))
FILE_TARGET_CHAT = int(os.getenv('FILE_TARGET_CHAT', 0))

YOUR_GROUP_LINK = os.getenv('YOUR_GROUP_LINK', "https://t.me/default_group")
YOUR_CHANNEL_LINK = os.getenv('YOUR_CHANNEL_LINK', "https://t.me/default_channel")

# ржбрж┐ржлрж▓рзНржЯ ржХржирж╕рзНржЯрзНржпрж╛ржирзНржЯрж╕
DEFAULT_COUNTRY_NAME = "Unknown"
DEFAULT_FLAG = "ЁЯМН"
DEFAULT_DIAL_CODE = "Unknown"

# ==== ржХрж╛ржирзНржЯрзНрж░рж┐ ржбрзЗржЯрж╛ рж╕рзЗржЯржЖржк ====
COUNTRY_DATA = {}
COUNTRY_DATA_FILE = 'country_flags.json'

def load_country_data():
    """`country_flags.json` ржерзЗржХрзЗ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рзЗ ржмрж╛ ржПржХржЯрж┐ ржбрж┐ржлрж▓рзНржЯ рж╕рзЗржЯ рждрзИрж░рж┐ ржХрж░рзЗред"""
    global COUNTRY_DATA
    try:
        with open(COUNTRY_DATA_FILE, 'r', encoding='utf-8') as f:
            COUNTRY_DATA = json.load(f)
        print(f"тЬЕ Country data loaded from {COUNTRY_DATA_FILE}")
    except FileNotFoundError:
        print(f"тЪая╕П {COUNTRY_DATA_FILE} not found. Creating a basic country data dictionary.")
        # ржпржжрж┐ ржлрж╛ржЗрж▓ ржирж╛ ржерж╛ржХрзЗ, ржПржЦрж╛ржирзЗ ржПржХржЯрж┐ ржкрзНрж░рж╛ржержорж┐ржХ рждрж╛рж▓рж┐ржХрж╛ рждрзИрж░рж┐ ржХрж░рж╛ рж╣рж▓рзЛред
        COUNTRY_DATA = {
            'sudan': {'flag': 'ЁЯЗ╕ЁЯЗй', 'dial_code': '+249'},
            'venezuela': {'flag': 'ЁЯЗ╗ЁЯЗк', 'dial_code': '+58'},
            'nepal': {'flag': 'ЁЯЗ│ЁЯЗ╡', 'dial_code': '+977'},
            'madagascar': {'flag': 'ЁЯЗ▓ЁЯЗм', 'dial_code': '+261'},
            'bangladesh': {'flag': 'ЁЯЗзЁЯЗй', 'dial_code': '+880'},
            'india': {'flag': 'ЁЯЗоЁЯЗ│', 'dial_code': '+91'},
            'pakistan': {'flag': 'ЁЯЗ╡ЁЯЗ░', 'dial_code': '+92'},
            'united states': {'flag': 'ЁЯЗ║ЁЯЗ╕', 'dial_code': '+1'},
            'uk': {'flag': 'ЁЯЗмЁЯЗз', 'dial_code': '+44'},
            # ржЕржирзНржпрж╛ржирзНржп ржжрзЗрж╢ ржпрзЛржЧ ржХрж░рзБржи...
        }
        # ржПржХржЯрж┐ JSON ржлрж╛ржЗрж▓рзЗ рж╕рзЗржн ржХрж░рж╛ рж╣рж▓рзЛ ржпрж╛рждрзЗ ржкрж░ржмрж░рзНрждрзАржХрж╛рж▓рзЗ рж▓рзЛржб ржХрж░рж╛ ржпрж╛рзЯ
        with open(COUNTRY_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(COUNTRY_DATA, f, ensure_ascii=False, indent=4)
        print(f"тЬЕ Basic country data saved to {COUNTRY_DATA_FILE}")

load_country_data()

# ржлрзНрж▓рзНржпрж╛ржЧ ржПржмржВ ржбрж╛ржпрж╝рж╛рж▓рж┐ржВ ржХрзЛржб ржжрж┐рзЯрзЗ ржХрж╛ржирзНржЯрзНрж░рж┐ ржбрзЗржЯрж╛ ржорзНржпрж╛ржк рждрзИрж░рж┐
FLAG_TO_COUNTRY = {v['flag']: k for k, v in COUNTRY_DATA.items() if 'flag' in v}
DIAL_CODE_TO_COUNTRY = {v['dial_code']: k for k, v in COUNTRY_DATA.items() if 'dial_code' in v}

def get_country_info(country_name=None, flag=None, dial_code=None):
    """ржжрзЗрж╢рзЗрж░ ржирж╛ржо, ржкрждрж╛ржХрж╛ ржмрж╛ ржбрж╛ржпрж╝рж╛рж▓рж┐ржВ ржХрзЛржб ржерзЗржХрзЗ ржжрзЗрж╢рзЗрж░ рждржерзНржп ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗред"""
    if country_name:
        for k, v in COUNTRY_DATA.items():
            if k.lower() == country_name.lower() or v.get('name', '').lower() == country_name.lower():
                return k.title(), v.get('flag', DEFAULT_FLAG), v.get('dial_code', DEFAULT_DIAL_CODE)
    if flag:
        country_key = FLAG_TO_COUNTRY.get(flag)
        if country_key:
            return country_key.title(), COUNTRY_DATA[country_key]['flag'], COUNTRY_DATA[country_key].get('dial_code', DEFAULT_DIAL_CODE)
    if dial_code:
        country_key = DIAL_CODE_TO_COUNTRY.get(dial_code)
        if country_key:
            return country_key.title(), COUNTRY_DATA[country_key]['flag'], COUNTRY_DATA[country_key]['dial_code']
    return DEFAULT_COUNTRY_NAME, DEFAULT_FLAG, DEFAULT_DIAL_CODE

def mask_phone_number(num: str) -> str:
    """ржлрзЛржи ржиржорзНржмрж░рзЗрж░ ржорж╛ржЭрзЗрж░ ржЕржВрж╢ **** ржжрж┐рзЯрзЗ ржорж╛рж╕рзНржХрж┐ржВ ржХрж░рзЗред"""
    num = num.replace(' ', '').replace('-', '') # рж╕рзНржкрзЗрж╕ ржПржмржВ рж╣рж╛ржЗржлрзЗржи рж╕рж░рж╛ржи
    
    if len(num) < 7:
        return num # ржЫрзЛржЯ ржиржорзНржмрж░рзЗрж░ ржЬржирзНржп ржорж╛рж╕рзНржХрж┐ржВ ржирзЯ

    if num.startswith('+'):
        # ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ ржХрзЛржб ржЖрж▓рж╛ржжрж╛ ржХрж░рж╛
        prefix_match = re.match(r'^\+\d{1,4}', num)
        if prefix_match:
            prefix_str = prefix_match.group(0)
            main_num = num[len(prefix_str):]
            if len(main_num) > 4:
                # ржорзВрж▓ ржиржорзНржмрж░рзЗрж░ ржкрзНрж░ржержо ржПржмржВ рж╢рзЗрж╖ ржЕржВрж╢ рж░рзЗржЦрзЗ ржорж╛ржЭрзЗрж░ ржЕржВрж╢ ржорж╛рж╕рзНржХрж┐ржВ
                mask_start = len(main_num) // 3
                mask_end = len(main_num) - (len(main_num) // 3)
                return f"{prefix_str}{main_num[:mask_start]}****{main_num[mask_end:]}"
            return num
        
    # ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ ржХрзЛржб ржирж╛ ржерж╛ржХрж▓рзЗ ржмрж╛ ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржирж╛ ржорж┐рж▓рж▓рзЗ
    if len(num) > 4:
        mask_start = len(num) // 3
        mask_end = len(num) - (len(num) // 3)
        return f"{num[:mask_start]}****{num[mask_end:]}"
    
    return num

# ЁЯЪА ржЗржирзНржЯрзЗрж▓рж┐ржЬрзЗржирзНржЯ OTP ржПржХрзНрж╕ржЯрзНрж░рзНржпрж╛ржХрзНржЯрж░
def extract_otp_info(original_text):
    """рж╕ржм рждржерзНржп ржПржХрж╕рж╛ржерзЗ ржПржХрзНрж╕ржЯрзНрж░рзНржпрж╛ржХрзНржЯ ржХрж░рзЗ"""

    # OTP ржПржХрзНрж╕ржЯрзНрж░рзНржпрж╛ржХрзНржЯ - рж╕ржмржЪрзЗрзЯрзЗ рж╕рзБржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкрзНржпрж╛ржЯрж╛рж░рзНржиржЧрзБрж▓рж┐ ржкрзНрж░ржержорзЗ
    otp_patterns = [
        # 1. 'OTP:', 'code:', 'pin:' ржЗрждрзНржпрж╛ржжрж┐ рж╢ржмрзНржжржЧрзБрж▓рж┐рж░ рж╕рж╛ржерзЗ 4-8 ржбрж┐ржЬрж┐ржЯрзЗрж░ рж╕ржВржЦрзНржпрж╛
        r'(?:otp|code|pin|verify|verification|secret|╪▒┘Е╪▓|ржХржб|k├│d|codice|c├│digo)\s*[:\s-]*\s*(\d{4,8})',
        # 2. 'is your code:' ржПрж░ ржорждрзЛ ржмрж╛ржХрзНржпрзЗрж░ ржкрж░рзЗ 4-8 ржбрж┐ржЬрж┐ржЯрзЗрж░ рж╕ржВржЦрзНржпрж╛
        r'(\d{4,8})\s*(?:is your|рж╣рзИржЫрзЗ ржЖржкрзЛржирж╛рз░)\s*(?:facebook|whatsapp|verification)?\s*code',
        # 3. Google specific codes
        r'\b(?:G-|Google\s*Code:\s*)(\d{6})\b',
        # 4. WhatsApp/Facebook style OTPs like 123-456 or 123 456
        r'(?:whatsapp|facebook|fb|wa).*?(\d{3}[-\s]?\d{3,4})\b',
        # 5. Fallback: Standalone 6-digit number
        r'(?<!\d)(\d{6})(?!\d)',
        # 6. Fallback: Standalone 4-digit number
        r'(?<!\d)(\d{4})(?!\d)'
    ]

    otp_code = None
    used_pattern = None
    for pattern_str in otp_patterns:
        match = re.search(pattern_str, original_text, re.IGNORECASE)
        if match:
            potential_otp = match.group(1).replace('-', '').replace(' ', '') # рж╣рж╛ржЗржлрзЗржи/рж╕рзНржкрзЗрж╕ рж╕рж░рж┐ржпрж╝рзЗ рж╢рзБржзрзБ ржбрж┐ржЬрж┐ржЯ рж░рж╛ржЦрж╛
            
            # ржЕрждрж┐рж░рж┐ржХрзНржд ржЪрзЗржХ: ржпржжрж┐ рж╕ржорзНржнрж╛ржмрзНржп OTP 9 ржмрж╛ рждрж╛рж░ ржмрзЗрж╢рж┐ ржбрж┐ржЬрж┐ржЯрзЗрж░ рж╣ржпрж╝, рждржмрзЗ ржПржЯрж┐ ржлрзЛржи ржиржорзНржмрж░рзЗрж░ ржорждрзЛ ржжрзЗржЦрж╛ржпрж╝, OTP ржиржпрж╝ред
            if len(potential_otp) >= 9:
                # ржпржжрж┐ ржПржЯрж┐ ржПржХржЯрж┐ ржлрзЛржи ржиржорзНржмрж░рзЗрж░ ржорждрзЛ ржжрзЗржЦрж╛ржпрж╝ (+249123456789)
                if re.match(r'^\d{1,4}\d{6,}', potential_otp):
                    continue # ржПржЗ OTP ржмрж╛рждрж┐рж▓ ржХрж░рзБржи ржПржмржВ ржкрж░ржмрж░рзНрждрзА ржкрзНржпрж╛ржЯрж╛рж░рзНржирзЗ ржпрж╛ржи
                
            otp_code = potential_otp
            used_pattern = pattern_str # ржкрзНржпрж╛ржЯрж╛рж░рзНржи рж╕рзНржЯрзНрж░рж┐ржВ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи
            break

    # ржжрзЗрж╢ ржПржХрзНрж╕ржЯрзНрж░рзНржпрж╛ржХрзНржЯ
    country_name_detected = DEFAULT_COUNTRY_NAME
    country_flag_detected = DEFAULT_FLAG
    country_dial_code_detected = DEFAULT_DIAL_CODE

    # ржкрзНржпрж╛ржЯрж╛рж░рзНржи 1: рж╕рж░рж╛рж╕рж░рж┐ 'Country: ' ржмрж╛ рж╢рзБржзрзБ ржжрзЗрж╢рзЗрж░ ржирж╛ржо + ржлрзНрж▓рзНржпрж╛ржЧ (ржпрзЗржоржи: Country: MauritaniaЁЯЗ▓ЁЯЗ╖, MauritaniaЁЯЗ▓ЁЯЗ╖)
    country_full_match = re.search(r'(?:Country:\s*)?([A-Za-z\s]+)\s*([ЁЯЗж-ЁЯЗ┐]{2,})', original_text)
    if country_full_match:
        c_name_from_text = country_full_match.group(1).strip()
        flag_from_text = country_full_match.group(2)
        
        # ржкрзНрж░ржержорзЗ ржирж╛ржо ржжрж┐рзЯрзЗ ржЦрзЛржБржЬрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи
        found_name, found_flag, found_dial = get_country_info(country_name=c_name_from_text)
        if found_name != DEFAULT_COUNTRY_NAME:
            country_name_detected, country_flag_detected, country_dial_code_detected = found_name, found_flag, found_dial
        else: # ржпржжрж┐ ржирж╛ржо ржжрж┐рзЯрзЗ ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, ржлрзНрж▓рзНржпрж╛ржЧ ржжрж┐рзЯрзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи
            found_name, found_flag, found_dial = get_country_info(flag=flag_from_text)
            if found_name != DEFAULT_COUNTRY_NAME:
                country_name_detected, country_flag_detected, country_dial_code_detected = found_name, found_flag, found_dial
            else: # ржпржжрж┐ ржлрзНрж▓рзНржпрж╛ржЧ ржжрж┐рзЯрзЗржУ ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, рждржмрзЗ ржкрзНрж░рж╛ржкрзНржд ржирж╛ржо ржУ ржлрзНрж▓рзНржпрж╛ржЧ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
                country_name_detected = c_name_from_text.title()
                country_flag_detected = flag_from_text
    
    # ржпржжрж┐ ржЙржкрж░рзЗрж░ ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржирж╛ ржорзЗрж▓рзЗ, рждрж╛рж╣рж▓рзЗ ржЕржирзНржпрж╛ржирзНржп ржкрзНржпрж╛ржЯрж╛рж░рзНржирзЗ ржпрж╛ржи
    if country_name_detected == DEFAULT_COUNTRY_NAME:
        # ржкрзНржпрж╛ржЯрж╛рж░рзНржи 2: рж╢рзБржзрзБ 'Country: ' ржмрж╛ рж╢рзБржзрзБ ржжрзЗрж╢рзЗрж░ ржирж╛ржо
        country_name_match = re.search(r'Country:\s*([A-Za-z\s]+)', original_text, re.IGNORECASE)
        if country_name_match:
            c_name_from_text = country_name_match.group(1).strip()
            country_name_detected, country_flag_detected, country_dial_code_detected = get_country_info(country_name=c_name_from_text)
        
    if country_name_detected == DEFAULT_COUNTRY_NAME:
        # ржкрзНржпрж╛ржЯрж╛рж░рзНржи 3: рж╢рзБржзрзБ ржлрзНрж▓рзНржпрж╛ржЧ ржерж╛ржХрж▓рзЗ
        flag_only_match = re.search(r'([ЁЯЗж-ЁЯЗ┐]{2,})', original_text)
        if flag_only_match:
            flag = flag_only_match.group(1)
            country_name_detected, country_flag_detected, country_dial_code_detected = get_country_info(flag=flag)

    if country_name_detected == DEFAULT_COUNTRY_NAME:
        # ржкрзНржпрж╛ржЯрж╛рж░рзНржи 4: ржбрж╛ржпрж╝рж╛рж▓рж┐ржВ ржХрзЛржб ржерзЗржХрзЗ ржжрзЗрж╢ ржЕржирзБржорж╛ржи (рж╕рзЛрж░рзНрж╕ ржорзЗрж╕рзЗржЬрзЗрж░ ржоржзрзНржпрзЗ ржерж╛ржХрж╛ ржлрзЛржи ржиржорзНржмрж░ ржерзЗржХрзЗ)
        dial_code_match = re.search(r'(\+\d{1,4})\d{7,15}', original_text)
        if dial_code_match:
            dial_code = dial_code_match.group(1)
            country_name_detected, country_flag_detected, country_dial_code_detected = get_country_info(dial_code=dial_code)

    # ржпржжрж┐ ржжрзЗрж╢ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ ржХрж┐ржирзНрждрзБ ржбрж╛ржпрж╝рж╛рж▓рж┐ржВ ржХрзЛржб ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, рждржмрзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред
    if country_dial_code_detected == DEFAULT_DIAL_CODE and country_name_detected != DEFAULT_COUNTRY_NAME:
        _, _, temp_dial_code = get_country_info(country_name=country_name_detected)
        if temp_dial_code != DEFAULT_DIAL_CODE:
            country_dial_code_detected = temp_dial_code
    
    final_country_display = f"{country_flag_detected} {country_name_detected}"


    # ржирж╛ржорзНржмрж╛рж░ ржПржХрзНрж╕ржЯрзНрж░рзНржпрж╛ржХрзНржЯ ржУ ржлрж░ржорзНржпрж╛ржЯ
    number = "Not Found"
    
    # ржкрзНржпрж╛ржЯрж╛рж░рзНржи 1: d***d ржлрж░ржорзНржпрж╛ржЯ (ржпрзЗржоржи: 2491165****8649)
    number_match_masked = re.search(r'(?:Number|Phone|ржорзЛржмрж╛ржЗрж▓|Tel|T:)\s*[:\s]*(\d+\*{3,}\d+)', original_text, re.IGNORECASE)
    if number_match_masked:
        number = number_match_masked.group(1)
    else:
        # ржкрзНржпрж╛ржЯрж╛рж░рзНржи 2: рж╕рж░рж╛рж╕рж░рж┐ 7-15 ржбрж┐ржЬрж┐ржЯрзЗрж░ рж╕ржВржЦрзНржпрж╛ (ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ ржХрзЛржб рж╕рж╣ ржмрж╛ ржЫрж╛рзЬрж╛)
        number_match_full = re.search(r'(?:Number|Phone|ржорзЛржмрж╛ржЗрж▓|Tel|T:)\s*[:\s]*(\+?\d{7,15})', original_text, re.IGNORECASE)
        if number_match_full:
            number = mask_phone_number(number_match_full.group(1))
        else:
            # ржлрж▓ржмрзНржпрж╛ржХ: ржпржжрж┐ ржХрзЛржирзЛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ 'Number:' ржЯрзНржпрж╛ржЧ ржирж╛ ржерж╛ржХрзЗ, ржХрж┐ржирзНрждрзБ ржорзЗрж╕рзЗржЬрзЗ ржПржХржЯрж┐ masked number ржмрж╛ + ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ рж╣ржУрзЯрж╛ ржиржорзНржмрж░ ржерж╛ржХрзЗ
            masked_number_fallback = re.search(r'\d{2,}\*{3,}\d{2,}', original_text)
            if masked_number_fallback:
                number = masked_number_fallback.group(0)
            else:
                potential_number = re.search(r'\+\d{7,15}', original_text)
                if potential_number:
                    number = mask_phone_number(potential_number.group(0))


    # рж╕рж╛рж░рзНржнрж┐рж╕ ржбрж┐ржЯрзЗржХрзНржЯ
    service = "General Service"
    service_patterns = {
        'whatsapp|wa': 'WhatsApp', 'facebook|fb': 'Facebook', 'telegram': 'Telegram',
        'instagram': 'Instagram', 'Google|G-': 'Google', 'imo': 'IMO',
        'signal': 'Signal', 'vk': 'VK', 'twitter': 'Twitter', 'apple': 'Apple',
        'microsoft': 'Microsoft', 'snapchat': 'Snapchat', 'discord': 'Discord',
        'tiktok': 'TikTok', 'paypal': 'PayPal', 'amazon': 'Amazon',
        'netflix': 'Netflix', 'binance': 'Binance', 'hbo max': 'HBO Max',
        'viber': 'Viber', 'line': 'LINE', 'wechat': 'WeChat', 'skype': 'Skype',
        'roblox': 'Roblox', 'steam': 'Steam', 'epic games': 'Epic Games',
        'garena': 'Garena', 'free fire': 'Free Fire', 'pubg': 'PUBG',
        'banking|bank': 'Banking/Finance',
        'email|mail': 'Email Service',
        'olx': 'OLX', 'uber': 'Uber', 'careem': 'Careem', 'talabat': 'Talabat',
        'foodpanda': 'Foodpanda', 'bKash': 'bKash', 'nagad': 'Nagad',
        'rocket': 'Rocket', 'daraz': 'Daraz', 'pathao': 'Pathao', 'shopee': 'Shopee',
        'lazada': 'Lazada', 'ebay': 'eBay', 'stripe': 'Stripe', 'coinbase': 'Coinbase',
        'bybit': 'Bybit', 'kucoin': 'KuCoin', 'okx': 'OKX'
    }

    found_services = []
    for pattern_str, service_name in service_patterns.items():
        if re.search(r'\b(?:' + pattern_str + r')\b', original_text.lower()):
            found_services.append(service_name)

    if found_services:
        # WhatsApp/Facebook/Google ржХрзЗ ржЕржЧрзНрж░рж╛ржзрж┐ржХрж╛рж░ ржжрзЗржУржпрж╝рж╛
        if 'whatsapp' in original_text.lower() and 'WhatsApp' in found_services:
            service = 'WhatsApp'
        elif 'facebook' in original_text.lower() and 'Facebook' in found_services:
            service = 'Facebook'
        elif 'google' in original_text.lower() and 'Google' in found_services:
            service = 'Google'
        else:
            service = ", ".join(sorted(list(set(found_services))))
    elif "your verification code" in original_text.lower() or "your login code" in original_text.lower():
        service = "General Verification"
    elif "your security code" in original_text.lower() or "security alert" in original_text.lower():
        service = "Security Code"
    elif "your password reset" in original_text.lower():
        service = "Password Reset"


    return {
        'otp_code': otp_code,
        'country': final_country_display,
        'number': number,
        'service': service,
        'used_pattern': used_pattern
    }

async def main():
    # ржЖрж▓рзНржЯрзНрж░рж╛-ржлрж╛рж╕рзНржЯ ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ
    client = TelegramClient(
        'user_forward_session',
        API_ID,
        API_HASH,
        connection_retries=5,
        timeout=15,
        flood_sleep_threshold=0
    )

    await client.start()
    print("ЁЯФС Logged in successfully!")

    try:
        source_entity = await client.get_entity(OTP_SOURCE_CHAT)
        target_entity = await client.get_entity(OTP_TARGET_CHAT)
        print(f"тЬЕ Source OTP Group: {source_entity.title}")
        print(f"тЬЕ Target OTP Group: {target_entity.title}")

        file_source_entity = await client.get_entity(FILE_SOURCE_CHAT)
        file_target_entity = await client.get_entity(FILE_TARGET_CHAT)
        print(f"тЬЕ Source File Group: {file_source_entity.title}")
        print(f"тЬЕ Target File Group: {file_target_entity.title}")

    except Exception as e:
        print(f"тЭМ Group access error: {e}")
        print("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржмржЯ рж╕ржм ржЧрзНрж░рзБржкрзЗ ржЕрзНржпрж╛ржбржорж┐ржи рж╣рж┐рж╕рж╛ржмрзЗ ржЖржЫрзЗ ржПржмржВ рж╕ржарж┐ржХ ржЖржЗржбрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
        print("ржпржжрж┐ ржЗржЙржЬрж╛рж░ рж╕рзЗрж╢ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржи, рждрж╛рж╣рж▓рзЗ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржЗржЙржЬрж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯржЯрж┐ рж╕рзЛрж░рзНрж╕ ржЧрзНрж░рзБржкржЧрзБрж▓рзЛрж░ рж╕ржжрж╕рзНржпред")
        return

    # ЁЯЪА OTP ржкрзНрж░рж╕рзЗрж╕рж░
    @client.on(events.NewMessage(chats=OTP_SOURCE_CHAT))
    async def process_otp(event):
        try:
            start_time = time.time()
            original_text = event.raw_text

            # ржУрзЯрзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ, ржЬрзЯрзЗржи/рж▓рж┐ржн ржЗржнрзЗржирзНржЯ, рж╕рзНржкрзНржпрж╛ржо рж╕рзНржХрж┐ржк
            if any(keyword in original_text.lower() for keyword in [
                'welcome', 'hey there', 'joined', 'left', 'group link', 'bot link',
                'https://t.me/', 'subscribe to get otp', 'premium otp',
                'click here', 'join now', 'channel for otp', 'admin here',
                'https://discord.gg/', 'http://', 'https://'
            ]):
                print("тЭМ ржЗрж▓рж┐ржЧрзНржпрж╛рж▓ ржмрж╛ ржУрзЯрзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ рж╕рзНржХрж┐ржк ржХрж░рж╛ рж╣рж▓рзЛред")
                return

            print(f"ЁЯОп OTP рж╕рзНржХрзНржпрж╛ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")

            # рж╕ржм рждржерзНржп ржПржХрзНрж╕ржЯрзНрж░рзНржпрж╛ржХрзНржЯ
            info = extract_otp_info(original_text)

            if not info['otp_code']:
                print("тЭМ OTP ржХрзЛржб ржирж╛ ржкрзЗрзЯрзЗ рж╕рзНржХрж┐ржк ржХрж░рж╛ рж╣рж▓рзЛред")
                return

            print(f"тЬЕ OTP Found: {info['otp_code']} | Pattern: {info['used_pattern']}")

            current_time = datetime.now().strftime("%I:%M:%S %p") # 12-hour format
            current_date = datetime.now().strftime("%d-%m-%Y")

            # ржкрж╛рж░ржлрзЗржХрзНржЯ ржлрж░ржорзНржпрж╛ржЯрзЗржб ржорзЗрж╕рзЗржЬ
            formatted_message = f"""тЬЕ {info['country']} {info['service']} OTP Received Successfully ЁЯОЙ

ЁЯФС **OTP Code:** `{info['otp_code']}`

ЁЯУЮ **Number:** `{info['number']}`
ЁЯЫая╕П **Service:** {info['service']}
ЁЯМН **Country:** {info['country']}
тП░ **Time:** {current_time}
ЁЯУЕ **Date:** {current_date}

# Your {info['service']} verification code: `{info['otp_code']}`
Do not share this code with anyone!
"""
            # ржЖрж▓рзНржЯрзНрж░рж╛-ржлрж╛рж╕рзНржЯ рж╕рзЗржирзНржб
            await client.send_message(
                OTP_TARGET_CHAT,
                message=formatted_message,
                buttons=[
                    [Button.url("ЁЯУв Main Channel", YOUR_CHANNEL_LINK),
                     Button.url("ЁЯФР Join OTP Group", YOUR_GROUP_LINK)]
                ]
            )

            processing_time = round((time.time() - start_time) * 1000, 2)
            print(f"тЬЕ OTP рж╕рзЗржирзНржб ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ {processing_time}ms ржП! тЪб")
            print(f"ЁЯУН {info['country']} | ЁЯУ▒ {info['number']} | ЁЯФв {info['otp_code']} | ЁЯЫая╕П {info['service']}")

        except Exception as e:
            print(f"ЁЯЪи OTP ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржПрж░рж░: {e}")
            # ржпржжрж┐ ржХрзЛржирзЛ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд ржПрж░рж░ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржорзВрж▓ ржорзЗрж╕рзЗржЬржЯрж┐ ржлрж░ржУрзЯрж╛рж░рзНржб ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмрзЗ
            try:
                await client.send_message(
                    OTP_TARGET_CHAT,
                    f"тЪая╕П Error processing OTP! Could not format. Original message: \n\n`{original_text}`"
                )
            except Exception as fe:
                print(f"ЁЯЪи ржлрзЗржЗрж▓рзНржб ржЯрзБ ржлрж░ржУрзЯрж╛рж░рзНржб ржПрж░рж░ ржорзЗрж╕рзЗржЬ: {fe}")


    # ЁЯУБ ржлрж╛ржЗрж▓ ржлрж░ржУрзЯрж╛рж░рзНржбрж╛рж░
    @client.on(events.NewMessage(chats=FILE_SOURCE_CHAT))
    async def forward_file(event):
        # рж╢рзБржзрзБ ржлрж╛ржЗрж▓ ржмрж╛ ржорж┐ржбрж┐рзЯрж╛ ржорзЗрж╕рзЗржЬ ржлрж░ржУрзЯрж╛рж░рзНржб ржХрж░ржмрзЗ
        if event.file or event.media:
            try:
                caption = event.raw_text or ""
                # рж╕рзНржкрзНржпрж╛ржо рж▓рж┐ржВржХ, ржЗржЙржЬрж╛рж░ржирзЗржо, ржПржмржВ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╢ржмрзНржж рж░рж┐ржорзБржн
                cleaned_caption = re.sub(r'@\w+|t\.me/\S+|telegram\.me/\S+|OTP\s*:\s*JOIN HERE|http\S+|https\S+', '', caption, flags=re.IGNORECASE).strip()

                await client.send_file(
                    FILE_TARGET_CHAT,
                    file=event.media,
                    caption=cleaned_caption if cleaned_caption else None,
                    buttons=[Button.url("ЁЯФР OTP Group Join Here", YOUR_GROUP_LINK)]
                )
                print(f"ЁЯУБ ржлрж╛ржЗрж▓ ржлрж░ржУрзЯрж╛рж░рзНржб ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!")
            except Exception as e:
                print(f"тЭМ ржлрж╛ржЗрж▓ ржлрж░ржУрзЯрж╛рж░рзНржбрж┐ржВ ржПрж░рж░: {e}")


    print("ЁЯдЦ ржЪрзВрзЬрж╛ржирзНржд ржЗржирзНржЯрзЗрж▓рж┐ржЬрзЗржирзНржЯ ржмржЯ ржЪрж╛рж▓рзБ!")
    print("тЪб ржЖрж▓рзНржЯрзНрж░рж╛-ржлрж╛рж╕рзНржЯ OTP ржкрзНрж░рж╕рзЗрж╕рж┐ржВ...")
    print("ЁЯУб OTP ржПржмржВ ржлрж╛ржЗрж▓ ржорзЗрж╕рзЗржЬрзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрж┐...")
    print("=" * 50)

    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
